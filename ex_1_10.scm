; アッカーマン関数Aを定義
gosh> (define (A x y)
        (cond ((= y 0) 0)
              ((= x 0) (* 2 y))
              ((= y 1) 2)
              (else (A (- x 1) (A x (- y 1))))))
A

; 以下の式の値はいくつであるか？
gosh> (A 1 10)
1024
gosh> (A 2 4)
65536
gosh> (A 3 3)
65536


; 以下の手続について考察せよ。

; 例：以下の関数は5n^2を計算する
(define (k n) (* 5 n n))


; f(n)
; 2 * nを計算する
gosh> (define (f n) (A 0 n))
f
gosh> (f 2)
4
gosh> (f 4)
8
gosh> (f 10)
20
gosh> (f 150)
300


; g(n)
; 2^nを計算する

; 展開順
; (A 1 n)
; (A 0 (A 1 (- n 1)))
; (A 0 (A 0 (A 1 (- n 2))))
; ・・・nが1になるまで繰り返す
; n=1のとき返される2に、x=0の条件により2が掛けられることをn回繰り返すので2のn乗が返る

gosh> (define (g n) (A 1 n))
g
gosh> (g 2)
4
gosh> (g 10)
1024
gosh> (g 50)
1125899906842624
gosh> (g 4)
16


; h(n)
; 2をn回二乗した値を返す
; (h 4) = 2^(2^(2^(2)))

; 展開順
; (A 2 n)
; (A 1 (A 2 (- n 1)))
; (A 1 (A 1 (A 2 (- n 2))))
; ・・・nが1になるまで繰り返す
; (A 1 n)は2^n
; n=1のとき2が返されて、(A 1 2)になってから(A 1 [式])がn回展開される。
; →2がn回2乗される。

gosh> (define (h n) (A 2 n))
h
gosh> (h 1)
2
gosh> (h 2)
4
gosh> (h 3)
16
gosh> (h 4)
65536

; (h 3)の場合の展開順序を示す
(h 3)
(A 2 3)
(A (- 2 1) (A 2 (- 3 1)))
(A 1 (A 2 2))
(A 1 (A (- 2 1) (A 2 (- 2 1))))
(A 1 (A 1 (A 2 1)))
(A 1 (A 1 2))
(A 1 (A (- 1 1) (A 1 (- 2 1))))
(A 1 (A 0 (A 1 1)))
(A 1 (A 0 2))
(A 1 (* 2 2))
(A 1 4)
(A (- 1 1) (A 1 (- 4 1)))
(A 0 (A 1 3))
(A 0 (A (- 1 1) (A 1 (- 3 1))))
(A 0 (A 0 (A 1 2)))
(A 0 (A 0 (A (- 1 1) (A 1 (- 2 1)))))
(A 0 (A 0 (A 0 (A 1 1))))
(A 0 (A 0 (A 0 2)))
(A 0 (A 0 (* 2 2)))
(A 0 (A 0 4))
(A 0 (* 2 4))
(A 0 8)
(* 2 8)
16

